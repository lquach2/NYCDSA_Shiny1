raw.df %>%
mutate(raw.df$inspection.date, month = format(myDate,%m))
raw.df$inspection.date %>%
mutate(month = format(myDate, %m))
myDate = raw.df$inspection.date
myDate
format(myDate, %m)
myDate = raw.df$inspection.date
format(myDate, %m)
myDate = raw.df$inspection.date
format(myDate, "%m")
myDate = raw.df$inspection.date
#format(myDate, "%m")
raw.df %>%
mutate(., month = format(myDate, "%m"))
raw.df
myDate = raw.df$inspection.date
#format(myDate, "%m")
raw.df %>%
mutate(month = format(myDate, "%m"))
raw.df
str(raw.df)
myDate = raw.df$inspection.date
month <- format(myDate, "%m")
month
myDate = raw.df$inspection.date
month <- format(myDate, "%m")
raw.df %>%
mutate(monthID = month))
myDate = raw.df$inspection.date
month <- format(myDate, "%m")
raw.df %>%
mutate(monthID = month)
raw.df
myDate = raw.df$inspection.date
month <- format(myDate, "%m")
raw.df %>%
mutate(., monthID = month)
raw.df
myDate = raw.df$inspection.date
month <- format(myDate, "%m")
raw.dfm <- raw.df %>%
mutate(., monthID = month)
raw.dfm
str(raw.dfm)
myDate = raw.df$inspection.date
month <- format(myDate, "%m")
as.numeric(month)
raw.dfm <- raw.df %>%
mutate(., monthID = month)
raw.dfm
class(monthID)
class(month)
as.numeric(month)
myDate = raw.df$inspection.date
month <- as.numeric(format(myDate, "%m"))
month
class(month)
raw.dfm <- raw.df %>%
mutate(., monthID = month)
raw.dfm
class(monthID)
monthID
raw.dfm$monthID
class(raw.dfm$monthID)
raw.dfm$grade
raw.dfm$grade[is.na(raw.dfm$grade)] <- 0
raw.dfm$grade
raw.dfm$action
is.na(raw.dfm$grade)
raw.dfm %>%
select(camis, boro, cuisine, inspection.date, action, score, grade, month)
raw.df
raw.df %>%
rename("cuisine" = cuisine.description)
raw.df
raw.df %>%
rename(cuisine = cuisine.description)
raw.df
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
raw.df <- readr::read_csv("./data.csv")
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
for( i in colnames(raw.df)){
col_i <- which(colnames(raw.df)==i)
lowercase <- tolower(i)
print(str_interp("col_i=${col_i}"))
colnames(raw.df)[col_i] = str_replace_all(lowercase, " ", ".")
print(str_interp("i=${i}"))
print(str_interp("col_df=${colnames(raw.df)[col_i]}"))
}
raw.df %>%
rename(cuisine = cuisine.description)
# 2. Convert the inspection.date column from character to date format.
raw.df$inspection.date = as.Date(raw.df$inspection.date, format="%m/%d/%Y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
myDate = raw.df$inspection.date
month <- as.numeric(format(myDate, "%m"))
raw.dfm <- raw.df %>%
mutate(., monthID = month)
# 4. Impute the missing values for the 'grade' column
raw.dfm$grade[is.na(raw.dfm$grade)] <- 0
#is.na(raw.dfm$grade)
# 5. Rename the description from the action column to something short so it won't blow up your graph.
raw.dfm1 <- raw.dfm %>%
select(starts_with("Violation")) %>%
# 6. We want to filter out missing values to make our lives easier for further analysis.
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
raw.dfm %>%
select(camis, boro, cuisine, inspection.date, action, score, grade, month)
raw.df
raw.dfm
raw.df$cuisine.description
raw.df1 %>%
rename(cuisine = cuisine.description)
raw.df1 <- raw.df %>%
rename(cuisine = cuisine.description)
raw.df1
for( i in colnames(raw.df)){
col_i <- which(colnames(raw.df)==i)
lowercase <- tolower(i)
print(str_interp("col_i=${col_i}"))
colnames(raw.df)[col_i] = str_replace_all(lowercase, " ", ".")
print(str_interp("i=${i}"))
print(str_interp("col_df=${colnames(raw.df)[col_i]}"))
rename(cuisine = cuisine.description)
}
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
for( i in colnames(raw.df)){
col_i <- which(colnames(raw.df)==i)
lowercase <- tolower(i)
print(str_interp("col_i=${col_i}"))
colnames(raw.df)[col_i] = str_replace_all(lowercase, " ", ".")
print(str_interp("i=${i}"))
print(str_interp("col_df=${colnames(raw.df)[col_i]}"))
}
raw.df1 <- raw.df %>%
rename(cuisine = cuisine.description)
# 2. Convert the inspection.date column from character to date format.
raw.df1$inspection.date = as.Date(raw.df1$inspection.date, format="%m/%d/%Y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
myDate = raw.df1$inspection.date
month <- as.numeric(format(myDate, "%m"))
raw.dfm <- raw.df1 %>%
mutate(., monthID = month)
# 4. Impute the missing values for the 'grade' column
raw.dfm$grade[is.na(raw.dfm$grade)] <- 0
#is.na(raw.dfm$grade)
# 5. Rename the description from the action column to something short so it won't blow up your graph.
# 6. We want to filter out missing values to make our lives easier for further analysis.
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
raw.dfm %>%
select(camis, boro, cuisine, inspection.date, action, score, grade, month)
# 8. Unique inspections
raw.dfm
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
#distributed observations with a
#mean of 70 and standard deviation
#of 1.
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 70", "H0 Mean = 68"), lwd = 2,
lty = 2, col = c("black", "red"))
shiny::runApp('~/Desktop/ShinyApp')
runApp('~/Desktop/ShinyApp')
df_deg
df_deg <- read_csv("./degrees-that-pay-back.csv",
col_names = c("major", "start_med_slry", "mid_car_slry",
"percent_chng", "mid_car_10th", "mid_car_25th",
"mid_car_75th", "mid_car_90th"),
col_types = "cnndnnnn",
skip = 1)
runApp('~/Desktop/ShinyApp')
runApp('~/Desktop/ShinyApp')
df_deg
df_reg
library(shiny)
library(dplyr)
library(ggplot2)
library(scales)
library(maps)
require(usmap)
require(ggplot2)
library(tidyverse)
library(plotly)
library(grid)
setwd("~/Desktop/ShinyApp")
csv_files <- list.files(pattern = ".csv")
df_deg <- read_csv("./degrees-that-pay-back.csv",
col_names = c("major", "start_med_slry", "mid_car_slry",
"percent_chng", "mid_car_10th", "mid_car_25th",
"mid_car_75th", "mid_car_90th"),
col_types = "cnndnnnn",
skip = 1)
df_col <- read_csv("./salaries-by-college-type.csv",
col_names = c("school_name", "school_type", "start_med_slry",
"mid_car_slry", "mid_car_10th", "mid_car_25th",
"mid_car_75th", "mid_car_90th"),
col_types = "ccnnnnnn", skip = 1)
df_reg <- read_csv("./salaries-by-region.csv",
col_names = c("school_name", "region", "start_med_slry",
"mid_car_slry", "mid_car_10th", "mid_car_25th",
"mid_car_75th", "mid_car_90th"),
col_types = "ccnnnnnn", skip = 1)
df_nat <- read_csv("./national_universities_rankings1.csv",
col_names = c("school_name", "rank",
"tuition_and_fees", "in_state"),
col_types = "ccnnnnnn", skip = 1)
df_state <- read_csv("./states_by_region.csv", col_names = c("state", "abbreviation","region"), skip = 1)
df_state_reg <- merge(df_state, df_reg, by='region')
df_col_nat <- merge(df_col, df_nat, by="school_name")
df_col_natf <- df_col_nat %>%
select(-rank, -X5, -X6, -X7, -X8)
df_deg
df_col
df_reg
for( i in colnames(df_reg)){
col_i <- which(colnames(df_reg)==i)
lowercase <- tolower(i)
colnames(df_reg)[col_i] = str_replace_all("California", "Western")
}
?str_replace_all
for( i in colnames(df_reg)){
col_i <- which(colnames(df_reg)==i)
lowercase <- tolower(i)
colnames(df_reg)[col_i] = str_replace_all(region, "California", "Western")
}
for( i in colnames(df_reg)){
col_i <- which(colnames(df_reg)==i)
lowercase <- tolower(i)
colnames(df_reg)[col_i] = str_replace_all(Region, "California", "Western")
}
df_reg
df_deg_all <- for( i in colnames(df_reg)){
col_i <- which(colnames(df_reg)==i)
lowercase <- tolower(i)
colnames(df_reg)[col_i] = str_replace(region, "California", "Western")
}
df_deg_all <- for( i in colnames(df_reg)){
col_i <- which(colnames(df_reg)==i)
lowercase <- tolower(i)
colnames(df_reg)[col_i] = str_replace("California", "Western")
}
df_deg_all <- for( i in colnames(df_reg)){
col_i <- which(colnames(df_reg)==i)
lowercase <- tolower(i)
colnames(df_reg)[col_i] = str_replace_all(region, "California", "Western")
}
df_reg_all <- df_reg %>%
str_replace_all(c("California" = "Western"))
df_reg_ca <- df_reg[df_reg == California] <- Western
df_reg[df_reg$region == California, ""]
df_reg_ca <- df_reg[df_reg$region == California] <- Western
df_reg_ca <- df_reg %>%
gsub("California", "Western", df_reg)
df_reg_ca
df_reg_ca <- df_reg %>%
gsub("California", "Western")
df_reg_ca <- df_reg$region(lapply(df_reg$region, function(x) {
gsub("California", "Western", x)}))
runApp()
runApp()
runApp()
runApp()
df_reg_deg <- merge(df_deg, df_reg, by='start_med_slry')
df_reg_deg <- merge(df_deg, df_reg, by='start_med_slry')
df_reg_deg
df_reg_deg <- inner_join(df_deg, df_reg, by='start_med_slry')
df_reg_deg
df_reg_deg <- inner_join(df_deg, df_reg, by='start_med_slry') %>%
filter(., major, start_med_slry, mid_car_slry)
df_reg_deg %>%
filter(., major, start_med_slry, mid_car_slry)
df_reg_deg %>%
select(., major, start_med_slry, mid_car_slry)
df_reg_deg <- inner_join(df_deg, df_reg, by='start_med_slry')
df_reg_deg
df_reg_deg <- merge(df_deg, df_reg, by='start_med_slry')
df_reg_deg
df_reg_deg <- merge(df_deg, df_reg, by='start_med_slry', 'mid_car_slry')
df_reg_deg
runApp()
runApp()
df_reg2 <- df_reg %>%
filter(., California, Western)
df_reg2 <- df_reg %>%
filter(., 'California', 'Western')
df_reg2 <- df_reg %>%
filter(., 'California', 'Western')
df_reg2 <- df_reg %>%
filter(region == 'California')
df_reg2
df_reg2 <- df_reg %>%
filter(region == 'California') %>%
mutate(region = 'Western')
df_reg2
?mutate
df_reg2 <- df_reg %>%
mutate_if(region = 'Western', region == 'California')
df_reg2 <- df_reg %>%
mutate_if(region = 'Western', region = 'California')
mutate_if(df_reg, region = 'Western', region == 'California')
df_reg2 <- df_reg %>%
mutate(region = replace(region, region == "California", "Western"))
df_Reg2
df_reg2
runApp()
input
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_deg
df_reg
df_col
df_reg
df_col
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
chiSqvecLoop = vector(mode='numeric', length = 10000)
for (j in 1:10000) {
chiSqSum = 0
for (i in 1:10) {
chiSqSum = chiSqSum + (rnorm(1))^2
}
chiSqvecLoop[j] = chiSqSum
}
hist(chiSqvecLoop, add = T, col = 'blue')
chiSqvecLoop = vector(mode='numeric', length = 10000)
for (j in 1:10000) {
chiSqSum = 0
for (i in 1:10) {
chiSqSum = chiSqSum + (rnorm(1))^2
}
chiSqvecLoop[j] = chiSqSum
}
hist(chiSqvecLoop, add = T, col = 'blue')
chiSqvecLoop = vector(mode='numeric', length = 10000)
for (j in 1:10000) {
chiSqSum = 0
for (i in 1:10) {
chiSqSum = chiSqSum + (rnorm(1))^2
}
chiSqvecLoop[j] = chiSqSum
}
hist(chiSqvecLoop, add = T, col = 'blue')
hist(chiSqvecLoop, add = T, col = 'blue')
n = 10
p = 10000
z = rnorm(n*p)
zmat = matrix(z,n,p)
zmatSq = zmat*zmat
chiSqvec = colSums(zmatSq)
hist(chiSqvec)
chiSqvecR = rchisq(10000, 10)
hist(chiSqvecR, add = T, col = 'Red')
chiSqvecLoop = vector(mode='numeric', length = 10000)
for (j in 1:10000) {
chiSqSum = 0
for (i in 1:10) {
chiSqSum = chiSqSum + (rnorm(1))^2
}
chiSqvecLoop[j] = chiSqSum
}
hist(chiSqvecLoop, add = T, col = 'blue')
n2 = 20
p = 10000
z = rnorm(n2*p)
zmat = matrix(z,n2,p)
zmatSq = zmat*zmat
chiSqvec2 = colSums(zmatSq)
fsim = (chiSqvec1/n1)/(chiSqvec2/n2)
hist(fsim)
fsimR = rf(10000,n2,n1)
fsimR = rf(10000, n1,n2)
hist(fsimR)
fsimR = rf(10000,n1,n2)
hist(fsimR)
hist(fsim,add=T,col='red')
n2 = 20
p = 10000
z = rnorm(n2*p)
zmat = matrix(z,n2,p)
zmatSq = zmat*zmat
chiSqvec2 = colSums(zmatSq)
fsim = (chiSqvec1/n1)/(chiSqvec2/n2)
n1 = 10
p = 10000
z = rnorm(n1*p)
zmat = matrix(z,n1,p)
zmatSq = zmat*zmat
chiSqvec1 = colSums(zmatSq)
hist(chiSqvec)
chiSqvecR = rchisq(10000,10)
hist(chiSqvecR,add=T,col='Red')
n2 = 20
p = 10000
z = rnorm(n2*p)
zmat = matrix(z,n2,p)
zmatSq = zmat*zmat
chiSqvec2 = colSums(zmatSq)
fsim = (chiSqvec1/n1)/(chiSqvec2/n2)
hist(fsim)
fsimR = rf(10000,n2,n1)
fsimR = rf(10000,n1,n2)
hist(fsimR)
fsimR = rf(10000,n1,n2)
hist(fsimR)
hist(fsim,add=T,col='red')
n1 = 10
p = 10000
z = rnorm(n1*p)
zmat = matrix(z,n1,p)
zmatSq = zmat*zmat
chiSqvec1 = colSums(zmatSq)
hist(chiSqvec)
chiSqvecR = rchisq(10000,10)
hist(chiSqvecR,add=T,col='Red')
fsim = (chiSqvec1/n1)/(chiSqvec2/n2)
hist(fsim)
fsimR = rf(10000,n2,n1)
fsim = (chiSqvec1/n1)/(chiSqvec2/n2)
hist(fsim)
fsimR = rf(10000,n2,n1)
fsimR = rf(10000,n1,n2)
hist(fsimR)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
raw.df <- readr::read_csv("./data.csv")
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
for( i in colnames(raw.df)){
col_i <- which(colnames(raw.df)==i)
lowercase <- tolower(i)
print(str_interp("col_i=${col_i}"))
colnames(raw.df)[col_i] = str_replace_all(lowercase, " ", ".")
print(str_interp("i=${i}"))
print(str_interp("col_df=${colnames(raw.df)[col_i]}"))
}
raw.df1 <- raw.df %>%
rename(cuisine = cuisine.description)
# 2. Convert the inspection.date column from character to date format.
raw.df1$inspection.date = as.Date(raw.df1$inspection.date, format="%m/%d/%Y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
myDate = raw.df1$inspection.date
month <- as.numeric(format(myDate, "%m"))
raw.dfm <- raw.df1 %>%
mutate(., monthID = month)
# 4. Impute the missing values for the 'grade' column
raw.dfm$grade[is.na(raw.dfm$grade)] <- 0
# 5. Rename the description from the action column to something short so it won't blow up your graph.
# 6. We want to filter out missing values to make our lives easier for further analysis.
raw.dfm1 <- raw.dfm %>%
filter_all(all_vars(!is.na(.)))
write.csv(raw.dfm1, file = "raw.dfm1.csv")
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
raw.dfm1 %>%
select(camis, boro, cuisine, inspection.date, action, score, grade, month)
# 8. Unique inspections
unique(raw.dfm1)
raw.dfm_grade <- raw.dfm1 %>%
select(., dba, boro, grade) %>%
group_by(boro) %>%
ggplot(aes(boro)) +
geom_bar(aes(grade, fill=boro)) +
xlab('grade') +
ggtitle("Restaurants by Borough and Grade") +
coord_flip()
raw.dfm_grade <- raw.dfm1 %>%
select(., dba, boro, grade) %>%
group_by(boro) %>%
ggplot(aes(boro)) +
geom_bar(aes(grade, fill=boro)) +
xlab('grade') +
ggtitle("Restaurants by Borough and Grade") +
coord_flip()
raw.dfm_grade <- raw.dfm1 %>%
select(., dba, boro, grade) %>%
group_by(boro) %>%
ggplot(aes(boro)) +
geom_bar(aes(grade, fill=boro)) +
xlab('grade') +
ggtitle("Restaurants by Borough and Grade") +
coord_flip()
raw.dfm_grade
raw.dfm_cuis <- raw.dfm1 %>%
select(grade, cuisine) %>%
arrange(., grade) %>%
group_by(cuisine, grade) %>%
distinct(raw.dfm1, cuisine) %>%
head(20) %>%
ggplot(aes(cuisine)) +
geom_bar(aes(fill = grade)) +
xlab(NULL) +
ggtitle("Cuisine by Borough and Grade") +
coord_flip()
raw.dfm_cuis
shiny::runApp()
